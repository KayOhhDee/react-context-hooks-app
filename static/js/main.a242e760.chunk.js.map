{"version":3,"sources":["contexts/ThemeContext.js","components/ThemeToggle.js","reducers/musicReducers.js","contexts/MusicContext.js","components/Navbar.js","components/MusicForm.js","components/MusicList.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","text","ui","bgcolor","inputbg","dark","toggleTheme","setState","prevState","Provider","value","this","props","children","Component","ThemeToggle","useContext","className","type","onClick","musicReducer","action","title","song","artist","id","uuidv4","filter","MusicContext","MusicContextProvider","useReducer","savedSongs","localStorage","getItem","JSON","parse","songs","dispatch","useEffect","setItem","stringify","Navbar","theme","style","background","color","length","MusicForm","useState","setTitle","setArtist","onSubmit","e","preventDefault","borderColor","placeholder","onChange","target","required","MusicList","map","key","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a242e760.chunk.js","sourcesContent":["import React, { createContext, Component } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n  state = {\r\n    isLightTheme: true,\r\n    light: {text: '#555', ui: '#ddd', bgcolor: '#eee', inputbg: '#fff'},\r\n    dark: {text: '#ddd', ui: '#333', bgcolor: '#555', inputbg: '#333'}\r\n  }\r\n\r\n  toggleTheme = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isLightTheme: !prevState.isLightTheme\r\n      }\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\r\n        {this.props.children}\r\n      </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeContextProvider;\r\n\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst ThemeToggle = () => {\r\n  const { toggleTheme } = useContext(ThemeContext);\r\n  return (\r\n    <label className=\"switch\">\r\n      <input type=\"checkbox\" />\r\n      <span className=\"slider round\" onClick={toggleTheme} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const musicReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_SONG':\r\n      return [...state, {\r\n        title: action.song.title,\r\n        artist: action.song.artist,\r\n        id: uuidv4() \r\n      }]\r\n    case 'REMOVE_SONG':\r\n      return state.filter(song => song.id !== action.id)  \r\n    default:\r\n      break;\r\n  }\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { musicReducer } from '../reducers/musicReducers';\r\n\r\nexport const MusicContext = createContext();\r\n\r\nconst MusicContextProvider = props => {\r\n  const [songs, dispatch] = useReducer(musicReducer, [], () => {\r\n    const savedSongs = localStorage.getItem(\"rhs_app\");\r\n    return  savedSongs ? JSON.parse(savedSongs) : [] \r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('rhs_app', JSON.stringify(songs))\r\n  }, [songs])\r\n\r\n  return (\r\n    <MusicContext.Provider value={{songs, dispatch}}>\r\n      {props.children}\r\n    </MusicContext.Provider>\r\n  );\r\n}\r\n\r\nexport default MusicContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\nimport ThemeToggle from \"./ThemeToggle\";\r\nimport { MusicContext } from '../contexts/MusicContext';\r\n\r\nconst Navbar = () => {\r\n  const {isLightTheme, light, dark} = useContext(ThemeContext);\r\n  const {songs} = useContext(MusicContext)\r\n  const theme = isLightTheme ? light : dark;\r\n  return (\r\n    <nav style={{ background: theme.ui, color: theme.text }}>\r\n      <ThemeToggle />\r\n      <h1>Songs list App</h1>\r\n      <div>{`You have ${songs.length} in your song list`}</div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { MusicContext } from \"../contexts/MusicContext\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst MusicForm = () => {\r\n  const { dispatch } = useContext(MusicContext);\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [artist, setArtist] = useState(\"\");\r\n\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n  const onHandleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({type: 'ADD_SONG', song: {title, artist}})\r\n    setTitle(\"\");\r\n    setArtist(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onHandleSubmit}>\r\n      <input\r\n        style={{\r\n          background: theme.inputbg,\r\n          color: theme.text,\r\n          borderColor: theme.text\r\n        }}\r\n        value={title}\r\n        type=\"text\"\r\n        placeholder=\"Song\"\r\n        onChange={e => setTitle(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        style={{\r\n          background: theme.inputbg,\r\n          color: theme.text,\r\n          borderColor: theme.text\r\n        }}\r\n        value={artist}\r\n        type=\"text\"\r\n        placeholder=\"Artist\"\r\n        onChange={e => setArtist(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        style={{\r\n          background: theme.inputbg,\r\n          color: theme.text,\r\n          borderColor: theme.text\r\n        }}\r\n        type=\"submit\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MusicForm;\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport { MusicContext } from \"../contexts/MusicContext\";\r\nimport MusicForm from \"./MusicForm\";\r\n\r\nconst MusicList = () => {\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const { songs, dispatch } = useContext(MusicContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  return (\r\n    <div\r\n      style={{ background: theme.bgcolor, color: theme.text }}\r\n      className=\"music-list\"\r\n    >\r\n    {songs.length ? \r\n      <ul>\r\n        {songs.map(song => (\r\n          <li key={song.id} style={{ background: theme.ui }}>\r\n            {song.title}\r\n            <span>Song by:&nbsp;{song.artist}</span>\r\n            <i onClick={() => dispatch({type: 'REMOVE_SONG', id: song.id})} className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n          </li>\r\n        ))}\r\n      </ul> : <div>You have no songs available.</div>\r\n    }\r\n      <MusicForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicList;\r\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport MusicList from './components/MusicList';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport MusicContextProvider from './contexts/MusicContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <MusicContextProvider>\n          <Navbar />\n          <MusicList />\n        </MusicContextProvider>\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}